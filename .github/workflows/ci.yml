name: F1 CLI Simulator CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        override: true
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-
    
    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --verbose

  build:
    name: Build
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            bin: f1-cli-simulator
            name: f1-cli-simulator-linux-amd64
          
          - os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
            bin: f1-cli-simulator
            name: f1-cli-simulator-linux-arm64
            
          - os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            bin: f1-cli-simulator
            name: f1-cli-simulator-macos-amd64
            
          - os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
            bin: f1-cli-simulator
            name: f1-cli-simulator-macos-arm64
            
          - os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            bin: f1-cli-simulator.exe
            name: f1-cli-simulator-windows-amd64
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
        override: true
    
    - name: Install cross-compilation tools
      if: contains(matrix.target, 'aarch64-unknown-linux')
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target ${{ matrix.target }}
        use-cross: ${{ contains(matrix.os, 'ubuntu') && contains(matrix.target, 'aarch64') }}
    
    - name: Package
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a ../../../${{ matrix.name }}.zip ${{ matrix.bin }}
        else
          tar czvf ../../../${{ matrix.name }}.tar.gz ${{ matrix.bin }}
        fi
        cd -
    
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.name }}
        path: |
          ${{ matrix.name }}.zip
          ${{ matrix.name }}.tar.gz
        if-no-files-found: warn

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Get the version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: F1 CLI Simulator ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        files: |
          **/f1-cli-simulator-*.tar.gz
          **/f1-cli-simulator-*.zip
        generate_release_notes: true